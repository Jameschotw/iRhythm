diff --git a/inc/mp3_dec/coder.h b/inc/mp3_dec/coder.h
index 3e8ab69..fad2947 100644
--- a/inc/mp3_dec/coder.h
+++ b/inc/mp3_dec/coder.h
@@ -287,8 +287,8 @@ extern const int quadTabMaxBits[2];
 #ifdef __cplusplus
 extern "C" {
 #endif
-void PolyphaseMono(short *pcm, int *vbuf, const int *coefBase);
-void PolyphaseStereo(short *pcm, int *vbuf, const int *coefBase);
+void PolyphaseMono(char *pcm, int *vbuf, const int *coefBase);
+void PolyphaseStereo(char *pcm, int *vbuf, const int *coefBase);
 #ifdef __cplusplus
 }
 #endif
diff --git a/inc/mp3_dec/mp3common.h b/inc/mp3_dec/mp3common.h
index c24b2ad..13b5640 100644
--- a/inc/mp3_dec/mp3common.h
+++ b/inc/mp3_dec/mp3common.h
@@ -109,7 +109,7 @@ int DecodeHuffman(MP3DecInfo *mp3DecInfo, unsigned char *buf, int *bitOffset, in
 int Dequantize(MP3DecInfo *mp3DecInfo, int gr);
 int IMDCT(MP3DecInfo *mp3DecInfo, int gr, int ch);
 int UnpackScaleFactors(MP3DecInfo *mp3DecInfo, unsigned char *buf, int *bitOffset, int bitsAvail, int gr, int ch);
-int Subband(MP3DecInfo *mp3DecInfo, short *pcmBuf);
+int Subband(MP3DecInfo *mp3DecInfo, char *pcmBuf);
 
 /* mp3tabs.c - global ROM tables */
 extern const int samplerateTab[3][3];
diff --git a/inc/mp3_dec/mp3dec.h b/inc/mp3_dec/mp3dec.h
index 83c338f..a57503e 100644
--- a/inc/mp3_dec/mp3dec.h
+++ b/inc/mp3_dec/mp3dec.h
@@ -123,7 +123,7 @@ typedef struct _MP3FrameInfo {
 /* public API */
 HMP3Decoder MP3InitDecoder(void);
 void MP3FreeDecoder(HMP3Decoder hMP3Decoder);
-int MP3Decode(HMP3Decoder hMP3Decoder, unsigned char **inbuf, int *bytesLeft, short *outbuf, int useSize);
+int MP3Decode(HMP3Decoder hMP3Decoder, unsigned char **inbuf, int *bytesLeft, char *outbuf, int useSize);
 
 void MP3GetLastFrameInfo(HMP3Decoder hMP3Decoder, MP3FrameInfo *mp3FrameInfo);
 int MP3GetNextFrameInfo(HMP3Decoder hMP3Decoder, MP3FrameInfo *mp3FrameInfo, unsigned char *buf);
diff --git a/src/MUSIC/HW_RAW/dma2spi.c b/src/MUSIC/HW_RAW/dma2spi.c
index c56b4a9..4ed2805 100644
--- a/src/MUSIC/HW_RAW/dma2spi.c
+++ b/src/MUSIC/HW_RAW/dma2spi.c
@@ -184,7 +184,7 @@ int32_t spi_writeraw(const void *data)
 	uint16_t *xfer_buf = (uint16_t *)data;
 
 	data_xfer.tx_buf = (uint16_t *)(xfer_buf);
-	data_xfer.len = 4608;
+	data_xfer.len = 2306;
 
 	/*ask dma to send here*/
 	if (spi_xfer(&data_xfer) != 0) 
diff --git a/src/MUSIC/mp3_dec/mp3dec.c b/src/MUSIC/mp3_dec/mp3dec.c
index 8c04670..98bdaf3 100644
--- a/src/MUSIC/mp3_dec/mp3dec.c
+++ b/src/MUSIC/mp3_dec/mp3dec.c
@@ -246,7 +246,7 @@ int MP3GetNextFrameInfo(HMP3Decoder hMP3Decoder, MP3FrameInfo *mp3FrameInfo, uns
  *
  * Return:      none
  **************************************************************************************/
-static void MP3ClearBadFrame(MP3DecInfo *mp3DecInfo, short *outbuf)
+static void MP3ClearBadFrame(MP3DecInfo *mp3DecInfo, char *outbuf)
 {
 	int i;
 
@@ -278,7 +278,7 @@ static void MP3ClearBadFrame(MP3DecInfo *mp3DecInfo, short *outbuf)
  * Notes:       switching useSize on and off between frames in the same stream 
  *                is not supported (bit reservoir is not maintained if useSize on)
  **************************************************************************************/
-int MP3Decode(HMP3Decoder hMP3Decoder, unsigned char **inbuf, int *bytesLeft, short *outbuf, int useSize)
+int MP3Decode(HMP3Decoder hMP3Decoder, unsigned char **inbuf, int *bytesLeft, char *outbuf, int useSize)
 {
 	int offset, bitOffset, mainBits, gr, ch, fhBytes, siBytes, freeFrameBytes;
 	int prevBitOffset, sfBlockBits, huffBlockBits;
diff --git a/src/MUSIC/mp3_dec/polyphase.c b/src/MUSIC/mp3_dec/polyphase.c
index 298a170..5a61c5d 100644
--- a/src/MUSIC/mp3_dec/polyphase.c
+++ b/src/MUSIC/mp3_dec/polyphase.c
@@ -56,39 +56,44 @@
  */
 #define DEF_NFRACBITS	(DQ_FRACBITS_OUT - 2 - 2 - 15)
 #define CSHIFT	12	/* coefficients have 12 leading sign bits for early-terminating mulitplies */
+#define MOVE_BIT 13 
+#define CHECK_BIT 8
+// static __inline short ClipToShort(int x, int fracBits)
+// {
+// 	int sign;
 
-static __inline short ClipToShort(int x, int fracBits)
-{
-	int sign;
-
-	/* assumes you've already rounded (x += (1 << (fracBits-1))) */
-	x >>= fracBits;
+// 	/* assumes you've already rounded (x += (1 << (fracBits-1))) */
+// 	x >>= fracBits;
 
-	/* Ken's trick: clips to [-32768, 32767] */
-	sign = x >> 31;
-	if (sign != (x >> 15))
-		x = sign ^ ((1 << 15) - 1);
+// 	/* Ken's trick: clips to [-32768, 32767] */
+// 	// sign = x >> 31;
+// 	// if (sign != (x >> 15))
+// 	// 	x = sign ^ ((1 << 15) - 1);
 
-	return (short)x;
-}
+// 	return (short)x;
+// }
 
 #define MC0M(x)	{ \
 	c1 = *coef;		coef++;		c2 = *coef;		coef++; \
 	vLo = *(vb1+(x));			vHi = *(vb1+(23-(x))); \
-	sum1L = MADD64(sum1L, vLo,  c1);	sum1L = MADD64(sum1L, vHi, -c2); \
+	cal_temp0 = (short)(vLo>>MOVE_BIT) * (short)(c1>>MOVE_BIT);  cal_temp1 = (short)(vHi>>MOVE_BIT)*(short)(c2>>MOVE_BIT); \
+	sum1L += cal_temp0 - cal_temp1; \
 }
 
 #define MC1M(x)	{ \
 	c1 = *coef;		coef++; \
 	vLo = *(vb1+(x)); \
-	sum1L = MADD64(sum1L, vLo,  c1); \
+	cal_temp0 = (short)(vLo>>MOVE_BIT) * (short)(c1>>MOVE_BIT); \
+	sum1L += cal_temp0; \
 }
 
 #define MC2M(x)	{ \
 		c1 = *coef;		coef++;		c2 = *coef;		coef++; \
 		vLo = *(vb1+(x));	vHi = *(vb1+(23-(x))); \
-		sum1L = MADD64(sum1L, vLo,  c1);	sum2L = MADD64(sum2L, vLo,  c2); \
-		sum1L = MADD64(sum1L, vHi, -c2);	sum2L = MADD64(sum2L, vHi,  c1); \
+		cal_temp0 = (short)(vLo>>MOVE_BIT) * (short)(c1>>MOVE_BIT);  cal_temp1 = (short)(vLo>>MOVE_BIT)*(short)(c2>>MOVE_BIT); \
+		cal_temp2 = (short)(vHi>>MOVE_BIT) * (short)(c2>>MOVE_BIT);  cal_temp3 = (short)(vHi>>MOVE_BIT)*(short)(c1>>MOVE_BIT); \
+		sum1L += cal_temp0 - cal_temp2; \
+		sum2L += cal_temp1 + cal_temp3; \
 }
 
 /**************************************************************************************
@@ -110,15 +115,18 @@ static __inline short ClipToShort(int x, int fracBits)
  * TODO:        add 32-bit version for platforms where 64-bit mul-acc is not supported
  *                (note max filter gain - see polyCoef[] comments)
  **************************************************************************************/
-void PolyphaseMono(short *pcm, int *vbuf, const int *coefBase)
+void PolyphaseMono(char *pcm, int *vbuf, const int *coefBase)
 {
 	int i;
 	const int *coef;
 	int *vb1;
 	int vLo, vHi, c1, c2;
-	Word64 sum1L, sum2L, rndVal;
+	// Word64 sum1L, sum2L, rndVal;
+	int sum1L, sum2L, rndVal;
+	int cal_temp0,cal_temp1,cal_temp2,cal_temp3;
 
-	rndVal = (Word64)( 1 << (DEF_NFRACBITS - 1 + (32 - CSHIFT)) );
+	// rndVal = (Word64)( 1 << (DEF_NFRACBITS - 1 + (32 - CSHIFT)) );
+	rndVal = 0;
 
 	/* special case, output sample 0 */
 	coef = coefBase;
@@ -134,7 +142,8 @@ void PolyphaseMono(short *pcm, int *vbuf, const int *coefBase)
 	MC0M(6)
 	MC0M(7)
 
-	*(pcm + 0) = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
+	// *(pcm + 0) = (short)SAR64(sum1L, 32-CSHIFT + DEF_NFRACBITS);
+	*(pcm + 0) = (char)(sum1L>>CHECK_BIT);
 
 	/* special case, output sample 16 */
 	coef = coefBase + 256;
@@ -150,7 +159,8 @@ void PolyphaseMono(short *pcm, int *vbuf, const int *coefBase)
 	MC1M(6)
 	MC1M(7)
 
-	*(pcm + 16) = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
+	// *(pcm + 16) = (short)SAR64(sum1L, (32 - CSHIFT + DEF_NFRACBITS));
+	*(pcm + 16) = (char)(sum1L>>CHECK_BIT);
 
 	/* main convolution loop: sum1L = samples 1, 2, 3, ... 15   sum2L = samples 31, 30, ... 17 */
 	coef = coefBase + 16;
@@ -171,8 +181,11 @@ void PolyphaseMono(short *pcm, int *vbuf, const int *coefBase)
 		MC2M(7)
 
 		vb1 += 64;
-		*(pcm)       = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
-		*(pcm + 2*i) = ClipToShort((int)SAR64(sum2L, (32-CSHIFT)), DEF_NFRACBITS);
+		// *(pcm)       = (short)SAR64(sum1L, (32-CSHIFT + DEF_NFRACBITS));
+		// *(pcm + 2*i) = (short)SAR64(sum2L, (32-CSHIFT + DEF_NFRACBITS));
+		*(pcm)       = (char)(sum1L>>CHECK_BIT);
+		*(pcm + 2*i) = (char)(sum2L>>CHECK_BIT);
+
 		pcm++;
 	}
 }
@@ -180,27 +193,44 @@ void PolyphaseMono(short *pcm, int *vbuf, const int *coefBase)
 #define MC0S(x)	{ \
 	c1 = *coef;		coef++;		c2 = *coef;		coef++; \
 	vLo = *(vb1+(x));		vHi = *(vb1+(23-(x))); \
-	sum1L = MADD64(sum1L, vLo,  c1);	sum1L = MADD64(sum1L, vHi, -c2); \
+	cal_temp0 = (short)(vLo>>MOVE_BIT)*(short)(c1>>MOVE_BIT); cal_temp1 = (short)(vHi>>MOVE_BIT)*(short)(c2>>MOVE_BIT);\
+	sum1L += cal_temp0 - cal_temp1;\
+	\
 	vLo = *(vb1+32+(x));	vHi = *(vb1+32+(23-(x))); \
-	sum1R = MADD64(sum1R, vLo,  c1);	sum1R = MADD64(sum1R, vHi, -c2); \
+	cal_temp0 = (short)(vLo>>MOVE_BIT)*(short)(c1>>MOVE_BIT); cal_temp1 = (short)(vHi>>MOVE_BIT)*(short)(c2>>MOVE_BIT);\
+	sum1R += cal_temp0 - cal_temp1;\
 }
 
 #define MC1S(x)	{ \
 	c1 = *coef;		coef++; \
 	vLo = *(vb1+(x)); \
-	sum1L = MADD64(sum1L, vLo,  c1); \
+	cal_temp0 = (short)(vLo>>MOVE_BIT)*(short)(c1>>MOVE_BIT); \
+	sum1L += cal_temp0;\
+	\
 	vLo = *(vb1+32+(x)); \
-	sum1R = MADD64(sum1R, vLo,  c1); \
+	cal_temp1 = (short)(vLo>>MOVE_BIT)*(short)(c1>>MOVE_BIT);\
+	sum1R += cal_temp1;\
 }
 
 #define MC2S(x)	{ \
 		c1 = *coef;		coef++;		c2 = *coef;		coef++; \
 		vLo = *(vb1+(x));	vHi = *(vb1+(23-(x))); \
-		sum1L = MADD64(sum1L, vLo,  c1);	sum2L = MADD64(sum2L, vLo,  c2); \
-		sum1L = MADD64(sum1L, vHi, -c2);	sum2L = MADD64(sum2L, vHi,  c1); \
+		\
+		cal_temp0 = (short)(vLo>>MOVE_BIT)*(short)(c1>>MOVE_BIT); \
+		cal_temp1 = (short)(vHi>>MOVE_BIT)*(short)(c2>>MOVE_BIT); \
+		cal_temp2 = (short)(vLo>>MOVE_BIT)*(short)(c2>>MOVE_BIT); \
+		cal_temp3 = (short)(vHi>>MOVE_BIT)*(short)(c1>>MOVE_BIT); \
+		\
+		sum1L += cal_temp0 - cal_temp1;\
+		sum2L += cal_temp2 + cal_temp3;\
+		\
 		vLo = *(vb1+32+(x));	vHi = *(vb1+32+(23-(x))); \
-		sum1R = MADD64(sum1R, vLo,  c1);	sum2R = MADD64(sum2R, vLo,  c2); \
-		sum1R = MADD64(sum1R, vHi, -c2);	sum2R = MADD64(sum2R, vHi,  c1); \
+		cal_temp0 = (short)(vLo>>MOVE_BIT)*(short)(c1>>MOVE_BIT); \
+		cal_temp1 = (short)(vHi>>MOVE_BIT)*(short)(c2>>MOVE_BIT); \
+		cal_temp2 = (short)(vLo>>MOVE_BIT)*(short)(c2>>MOVE_BIT); \
+		cal_temp3 = (short)(vHi>>MOVE_BIT)*(short)(c1>>MOVE_BIT); \
+		sum1R += cal_temp0 - cal_temp1; \
+		sum2R += cal_temp2 + cal_temp3; \
 }
 
 /**************************************************************************************
@@ -223,15 +253,19 @@ void PolyphaseMono(short *pcm, int *vbuf, const int *coefBase)
  *
  * TODO:        add 32-bit version for platforms where 64-bit mul-acc is not supported
  **************************************************************************************/
-void PolyphaseStereo(short *pcm, int *vbuf, const int *coefBase)
+void PolyphaseStereo(char *pcm, int *vbuf, const int *coefBase)
 {
 	int i;
 	const int *coef;
 	int *vb1;
 	int vLo, vHi, c1, c2;
-	Word64 sum1L, sum2L, sum1R, sum2R, rndVal;
+	// Word64 sum1L, sum2L, sum1R, sum2R, rndVal;
+	int sum1L, sum2L, sum1R, sum2R, rndVal;
+	int cal_temp0,cal_temp1,cal_temp2,cal_temp3;
+
+	// rndVal = (Word64)( 1 << (DEF_NFRACBITS - 1 + (32 - CSHIFT)) );
+	rndVal = 0 ;
 
-	rndVal = (Word64)( 1 << (DEF_NFRACBITS - 1 + (32 - CSHIFT)) );
 
 	/* special case, output sample 0 */
 	coef = coefBase;
@@ -247,8 +281,8 @@ void PolyphaseStereo(short *pcm, int *vbuf, const int *coefBase)
 	MC0S(6)
 	MC0S(7)
 
-	*(pcm + 0) = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
-	*(pcm + 1) = ClipToShort((int)SAR64(sum1R, (32-CSHIFT)), DEF_NFRACBITS);
+	*(pcm + 0) = (char)(sum1L>>CHECK_BIT);
+	*(pcm + 1) = (char)(sum1R>>CHECK_BIT);
 
 	/* special case, output sample 16 */
 	coef = coefBase + 256;
@@ -264,8 +298,8 @@ void PolyphaseStereo(short *pcm, int *vbuf, const int *coefBase)
 	MC1S(6)
 	MC1S(7)
 
-	*(pcm + 2*16 + 0) = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
-	*(pcm + 2*16 + 1) = ClipToShort((int)SAR64(sum1R, (32-CSHIFT)), DEF_NFRACBITS);
+	*(pcm + 2*16 + 0) = (char)(sum1L>>CHECK_BIT);
+	*(pcm + 2*16 + 1) = (char)(sum1R>>CHECK_BIT);
 
 	/* main convolution loop: sum1L = samples 1, 2, 3, ... 15   sum2L = samples 31, 30, ... 17 */
 	coef = coefBase + 16;
@@ -287,10 +321,10 @@ void PolyphaseStereo(short *pcm, int *vbuf, const int *coefBase)
 		MC2S(7)
 
 		vb1 += 64;
-		*(pcm + 0)         = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
-		*(pcm + 1)         = ClipToShort((int)SAR64(sum1R, (32-CSHIFT)), DEF_NFRACBITS);
-		*(pcm + 2*2*i + 0) = ClipToShort((int)SAR64(sum2L, (32-CSHIFT)), DEF_NFRACBITS);
-		*(pcm + 2*2*i + 1) = ClipToShort((int)SAR64(sum2R, (32-CSHIFT)), DEF_NFRACBITS);
+		*(pcm + 0)         = (char)(sum1L>>CHECK_BIT);
+		*(pcm + 1)         = (char)(sum1R>>CHECK_BIT);
+		*(pcm + 2*2*i + 0) = (char)(sum2L>>CHECK_BIT);
+		*(pcm + 2*2*i + 1) = (char)(sum2R>>CHECK_BIT);
 		pcm += 2;
 	}
 }
diff --git a/src/MUSIC/mp3_dec/subband.c b/src/MUSIC/mp3_dec/subband.c
index cc6d354..5fd004b 100644
--- a/src/MUSIC/mp3_dec/subband.c
+++ b/src/MUSIC/mp3_dec/subband.c
@@ -58,7 +58,7 @@
  *
  * Return:      0 on success,  -1 if null input pointers
  **************************************************************************************/
-int Subband(MP3DecInfo *mp3DecInfo, short *pcmBuf)
+int Subband(MP3DecInfo *mp3DecInfo, char *pcmBuf)
 {
 	int b;
 	//HuffmanInfo *hi;
diff --git a/src/MUSIC/mp3api.c b/src/MUSIC/mp3api.c
index 7a1da7a..476d46a 100644
--- a/src/MUSIC/mp3api.c
+++ b/src/MUSIC/mp3api.c
@@ -15,8 +15,8 @@
 // volatile bool isFinished = true;
 volatile uint8_t flag_sw = 0; 
 
-short buf_rec1[2304]={1};
-short buf_rec2[2304]={1};
+char buf_rec1[2304]={1};
+char buf_rec2[2304]={1};
 
 uint8_t dec_buff[NUM_BYTE_READ] = {1};
 
